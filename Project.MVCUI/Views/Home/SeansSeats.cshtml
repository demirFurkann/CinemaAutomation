@model ListSeansPageVM



<style>
    .seat-container {
        width: 60px;
        height: 80px;
        margin: 5px;
        background-color: #ccc;
        display: inline-block;
        text-align: center;
        font-size: 14px;
        cursor: pointer;
        border: 1px solid #ddd;
        padding: 5px;
    }

    .yellow-seat {
        background-color: yellow;
    }

    .row {
        margin-bottom: 10px;
    }


    .selected {
        background-color: #00F;
    }

    .empty-seat {
        background-color: #fff; /* Boş beyaz koltuklar için */
    }

    .reserved {
        background-color: yellow; /* Rezerve edilmiş sarı koltuklar için */
    }

    .occupied {
        background-color: red; /* Dolu kırmızı koltuklar için */
    }
</style>

<div class="container mt-4">
    <h4>Koltuklar</h4>
    <div class="row">
        @if (Model != null)
        {
            foreach (var seat in Model.Seats.OrderBy(s => s.Row).ThenBy(s => s.SeatNo))
            {
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="seat-container @GetSeatCssClasses(seat)" onclick="addToCart('@seat.ID', this)">
                    <!-- Koltuk ikonu veya içeriği burada eklenebilir -->
                    <span class="seat-row">@seat.Row</span><br />
                    <span class="seat-no">@seat.SeatNo</span>
                    <a href="@Url.Action("AddToCart","TicketBuy", new { id = seat.ID })">Rezervasyon Yap</a>

                </div>
            }
        }
        else
        {
            <p>Boşta koltuk yok.</p>
        }
    </div>
</div>
@foreach (var ticket in Model.Tickets)
{
    <!-- Burada ticket bilgilerini kullanabilirsiniz -->
    <!-- Örneğin: -->
    <p>Fiyat: @ticket.TotalPrice</p>
    <p>Tür: @ticket.Type</p>
}

<button type="submit">
    <a href="@Url.Action("TicketReservation","TicketBuy")">Satın Alma</a>
</button>
<button id="j1"> Değiştir </button>

@functions {
    // Koltuğa uygun CSS sınıflarını döndüren bir yardımcı fonksiyon
    string GetSeatCssClasses(SeatVM seat)
    {
        if (seat.SeatStatus == Project.ENTITIES.Enums.SeatStatus.Reserved)
        {
            return "reserved";
        }
        else if (seat.SeatStatus == Project.ENTITIES.Enums.SeatStatus.Occupied)
        {
            return "occupied";
        }
        else
        {
            return "empty-seat";
        }
    }
}

<!-- jQuery CDN -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    $(document).ready(function () {
        $("#j1").click(function () {
            var seansId = SEANS_ID; // uygun seans kimliğiyle değiştirin
            updateSeatsStatus(seansId);
        });
    });

    function updateSeatsStatus(seansId) {
        $.ajax({
            url: '/Home/GetStatus',
            type: "POST",
            data: { seansId: seansId, id: 0 }, // id parametresini 0 olarak gönderdik, çünkü tüm koltukların durumunu değiştireceğiz
            dataType: "json",
            success: function (data) {
                if (data.ErrorMessage) {
                    alert(data.ErrorMessage); // Hata mesajını göster
                } else {
                    alert("Koltuk durumları başarıyla güncellendi."); // Başarı mesajını göster
                    location.reload(); // Sayfayı yeniden yükle, böylece güncellenmiş koltuk durumlarını görebilirsiniz
                }
            },
            error: function () {
                alert("Koltuk durumu alınırken bir hata oluştu."); // Hata mesajını göster
            }
        });
    }
</script>

