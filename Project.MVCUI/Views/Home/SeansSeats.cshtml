@model ListSeansPageVM

<style>
    .seat {
        width: 50px;
        height: 50px;
        margin: 5px;
        background-color: #ccc;
        display: inline-block;
        text-align: center;
        line-height: 50px;
        font-size: 18px;
        cursor: pointer;
    }

    .row {
        margin-bottom: 10px;
    }

    .reserved {
        background-color: #f00;
    }

    .selected {
        background-color: #00F;
    }

    .disabled {
        background-color: #666;
    }
</style>
@functions {
    public string GetSeatStatusColor(Project.ENTITIES.Enums.SeatStatus seatStatus)
    {
        if (seatStatus == Project.ENTITIES.Enums.SeatStatus.Empty)
        {
            return "empty-seat";
        }
        else if (seatStatus == Project.ENTITIES.Enums.SeatStatus.Reserved)
        {
            return "reserved";
        }
        else // Selected durumunu da ekleyebilirsiniz.
        {
            return "";
        }
    }
}
<div class="container mt-4">
  
    <h4>Koltuklar</h4>
    <div class="row">
        @foreach (var seat in Model.Seats.OrderBy(s => s.Row).ThenBy(s => s.SeatNo))
        {
            <div class="col-md-3 mb-3">
                <div>
                    @seat.Row
                </div>
                <div class="seat @(GetSeatStatusColor(seat.SeatStatus))" onclick="selectSeat('@seat.SeatNo', this)">
                    @seat.SeatNo
                </div>
            </div>
        }
    </div>
</div>

<button id="reserveBtn" onclick="redirectToReservationPage()">Rezerve Et</button>
<button id="buyBtn" onclick="buySeats()">Satın Al</button>
<button id="cancelBtn" onclick="cancelSelection()">İptal Et</button>

<script>
    const seats = document.querySelectorAll('.seat');
    let selectedSeats = [];

    function selectSeat(seatNo, seatElement) {
        const seatStatus = seatElement.classList.contains('reserved') ? 'reserved' : 'empty';

        if (seatStatus !== 'reserved') {
            seatElement.classList.toggle('selected');
            const index = selectedSeats.indexOf(seatNo);
            if (index !== -1) {
                selectedSeats.splice(index, 1);
            } else {
                selectedSeats.push(seatNo);
            }
        }
    }

    function redirectToReservationPage() {

       
        const reservationUrl = 'Index';
         
        window.location.href = reservationUrl;
    }

    function reserveSeats() {
        alert('Seçili koltuklar rezerve edildi: ' + selectedSeats.join(', '));
        selectedSeats = [];
        seats.forEach(seat => seat.classList.remove('selected'));
    }

    function buySeats() {
        alert('Seçili koltuklar satın alındı: ' + selectedSeats.join(', '));
        selectedSeats = [];
        seats.forEach(seat => seat.classList.remove('selected'));
    }

    function cancelSelection() {
        selectedSeats = [];
        seats.forEach(seat => seat.classList.remove('selected'));
        alert('Seçili koltuklar iptal edildi.');
    }

    // Modeldeki koltuk durumlarına göre CSS sınıflarını belirleme
    const seatElements = document.querySelectorAll('.seat');
    seatElements.forEach(seatElement => {
        const seatStatus = seatElement.classList.contains('reserved') ? 'reserved' : 'empty';
        if (seatStatus === 'empty') {
            seatElement.classList.add('empty-seat');
        } else if (seatStatus === 'reserved') {
            seatElement.classList.add('reserved');
        }
    });
</script>
